const t="tutor",e="Tutor Finder",a="A smart tutor and student pairing application.",i={liveDemo:"https://example.com/tutor-finder",github:"https://github.com/saadhzubairi/Tutor-Finder-JavaFX.git"},s={src:"/Projects/tutor/tutor.png",alt:"Tutor Finder application preview"},n={frameworks:["JavaFX"],database:["SQL"],tools:["Java","CSS3"]},o=["Developed pairing algorithms using data structures like graphs and priority queues","Designed the complete JavaFX UI for student/tutor registration and search","Implemented filtering and ranking logic based on subject, timing, and location","Created clean navigation and dashboard views using custom CSS3","Managed persistent data storage with SQL for tutor-student records"],r="Built as a **data structures and algorithms demonstrator**, this project uses clean modular Java code and algorithmic logic to match students with appropriate tutors efficiently, wrapped in a fully interactive UI.",l=["Tutor Finder is an academic JavaFX desktop application showcasing the application of data structures in solving real-world problems. It facilitates intelligent pairing of students with suitable tutors based on multiple parameters such as subject, availability, and ratings.","It includes intuitive navigation, search filtering, and student-tutor match logic using priority-based matching and sorting algorithms. The application stores persistent tutor and student data using SQL backend."],c=[{src:"/Projects/tutor/1.png",alt:"Landing page with navigation pane"},{src:"/Projects/tutor/2.png",alt:"Tutor and subject selection screen"},{src:"/Projects/tutor/3.png",alt:"Search and filtering interface"},{src:"/Projects/tutor/4.png",alt:"Student registration screen"},{src:"/Projects/tutor/5.png",alt:"Tutor profiles list"},{src:"/Projects/tutor/6.png",alt:"Detailed match suggestion view"},{src:"/Projects/tutor/7.png",alt:"Tutor availability calendar"}],u=[{challenge:"Efficiently pairing tutors and students based on multiple preferences",solution:"Implemented a custom priority scoring system using heaps and hash maps to rank tutors for each student. Learned how to balance runtime with multi-criteria matching logic."},{challenge:"Designing a modular UI that cleanly separates student and tutor flows",solution:"Used JavaFX components and scenes to create dedicated flows while keeping shared state centralized. Reinforced skills in separation of concerns and controller-based UI design."}],d={hardSkills:["Graph-based Matching Algorithms","Priority Queues and Heaps","JavaFX Layouts and Navigation","Relational Data Modeling","Desktop UI with CSS3 Styling"],softSkills:["System Design Thinking","User Flow Mapping","Modular Code Structure","Debugging Multi-path Navigation"]},g={previous:{name:"Crick-Ex One",slug:"crickex"},next:{name:"Project Nebula",slug:"project-nebula"}},p={id:t,title:e,subtitle:a,links:i,heroImage:s,techStack:n,myResponsibilities:o,methodology:r,about:l,gallery:c,challengesAndLessons:u,skillsDeveloped:d,navigation:g};export{l as about,u as challengesAndLessons,p as default,c as gallery,s as heroImage,t as id,i as links,r as methodology,o as myResponsibilities,g as navigation,d as skillsDeveloped,a as subtitle,n as techStack,e as title};
//# sourceMappingURL=tutor-B3WdgVIJ.js.map
